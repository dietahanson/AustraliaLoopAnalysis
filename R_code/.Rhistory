stefgroup <- read.csv("stefgroups.csv",  #get groups
header = T,
stringsAsFactors = T)
stefgroup<-melt(stefgroup, id.vars = "Group", value.name = "name")
hotnet$predator.group <- stefgroup$Group[match(hotnet$predator,
stefgroup$name)]
which(is.na(hotnet$predator.group))
hotnet[320,]
hotnet <- read.csv("hotnet.csv",  #get network
header = T,
stringsAsFactors = F)
hotnet$weight <- NULL #take away weights
stefgroup <- read.csv("stefgroups.csv",  #get groups
header = T,
stringsAsFactors = F)
stefgroup<-melt(stefgroup, id.vars = "Group", value.name = "name")
hotnet$predator.group <- stefgroup$Group[match(hotnet$predator,
stefgroup$name)]
which(is.na(hotnet$predator.group))
hotnet[320,]
hotnet <- read.csv("hotnet.csv",  #get network
header = T,
stringsAsFactors = F)
hotnet$weight <- NULL #take away weights
stefgroup <- read.csv("stefgroups.csv",  #get groups
header = T,
stringsAsFactors = F)
stefgroup<-melt(stefgroup, id.vars = "Group", value.name = "name")
hotnet$predator.group <- stefgroup$Group[match(hotnet$predator,
stefgroup$name)]
print(count(is.na(hotnet$predator.group)), "with missing matches:",
hotnet[is.na(hotnet$predator.group)])
count(is.na(hotnet$predator.group))
sum(is.na(hotnet$predator.group)
)
print(sum(is.na(hotnet$predator.group)), "with missing matches:",
hotnet[is.na(hotnet$predator.group)])
print(sum(is.na(hotnet$predator.group)) "with missing matches:"
hotnet[is.na(hotnet$predator.group)])
?print
print(sum(is.na(hotnet$predator.group)))# "with missing matches:"
print(sum(is.na(hotnet$predator.group))) # "with missing matches:"
print(sum(is.na(hotnet$predator.group)), "with missing matches:")
cat(sum(is.na(hotnet$predator.group)), "with missing matches:",
hotnet[is.na(hotnet$predator.group)])
hotnet$prey.group <- stefgroup$Group[match(hotnet$prey,   #match prey
stefgroup$name)]
cat(sum(is.na(hotnet$prey.group)), "prey with missing matches:",
hotnet[is.na(hotnet$prey.group)])
hotnet[hotnet$predator=="human",]
?match
cat(sum(is.na(hotnet$prey.group)), "prey with missing matches:",
hotnet[is.na(hotnet$prey.group)])
?write.csv
colnames(hotnet)
hotnet$Type <- "Predator-prey"
source('~/Documents/Australia/R_code/network_work.R')
source('~/Documents/Australia/R_code/network_work.R')
source('~/Documents/Australia/R_code/network_work.R')
head(hotnet)
write.csv(hotnet, file = "hotgrouped.csv")
write.csv(hotnet, file = "hotgrouped.csv", row.names = F)
x=read.table('hotgrouped.csv',sep=',',header=T)
nwrand=1000 # number of randomisations with different random weights on interaction strengths
max_nwrand=20*nwrand #try a maximum of this many realisations to get the nwrand results
levels(hotnet$From)
source('~/Documents/Australia/R_code/network_work.R')
levels(hotnet$From)
# validation data: what can we use to ground-truth our models?
# these are responses to suppression of cats and myxoma (i.e. rabbits increased, tall tussock decreased, and cats decreased)
model_validation=matrix(c('camel',1,'invasive small mammal',1,'human',-1),nrow=3,ncol=2,byrow=TRUE)
colnames(model_validation)=c('response_node','response_value')
model_validation
# get the list of unique names within these interactions
node_names=unique(union(x$To,x$From))
node_names
hotnet[hotnet$From=="fire",]
stable_count_cm=0 # number of realisations that were stable
# summary of predictions for each element in the model
rsummary_cm=matrix(0,nrow=3,ncol=length(node_names))
rownames(rsummary_cm)=c('Negative','Zero','Positive')
colnames(rsummary_cm)=node_names
cm_idx=grep('(human)',node_names,ignore.case=T)
cm_idx
pcm_idx=grep('[^(human)]',node_names,ignore.case=T) #which elements in the model are relevant for the eradication project (not cats or myxo)
pcm_idx
pcm_node_names=node_names[pcm_idx]
stable_count_pcm=0 # number of realisations that passed the additional stability test (after the removal of cats and myxo from the model)
pcm_node_names
pcm_results_cols=grep('(emu|goanna|small mammal)',node_names,ignore.case=T) # the columns in the A matrix that give the responses to perturbations of our eradication target species
# summary of predictions for each element in the model
rsummary_pcm=matrix(0,nrow=3,ncol=length(pcm_node_names))
rownames(rsummary_pcm)=c('Negative','Zero','Positive')
colnames(rsummary_pcm)=pcm_node_names
# summary of predictions for each element in the model, but only for the subset of simulations in which the target species were actually suppressed
rsummary_pcm_subset=matrix(0,nrow=3,ncol=length(pcm_node_names)) #summary for successful runs
rownames(rsummary_pcm_subset)=c('Negative','Zero','Positive')
colnames(rsummary_pcm_subset)=pcm_node_names
diagval_max=-0.25 # maximum allowable value for self-limitation links
n=length(node_names) #number of nodes
n_pcm=length(pcm_node_names) #number of nodes once cats and myxo removed
n
n_pcm
cat(sprintf('Main loop started at: %s\n',date()))
flush.console()
# initialise the interactions matrix A
A=matrix(0,nrow=n,ncol=n)
colnames(A)=node_names
rownames(A)=node_names
for (k in (1:dim(x)[1])) {
if (grepl('(unknown|minor)',x[k,]$Importance,ignore.case=T)) {
# ignore 'minor' or 'unknown' links
next
}
this_from=as.character(x[k,]$From) # the "from" element of the interaction
this_to=as.character(x[k,]$To) # the "to" element of the interaction
if (grepl('competition',x[k,]$Type,ignore.case=T)) {
A[this_from,this_to]=-1
A[this_to,this_from]=-1
} else if (grepl('habitat',x[k,]$Type,ignore.case=T) || grepl('positive',x[k,]$Type,ignore.case=T)) {
A[this_to,this_from]=1
} else if (grepl('limiting',x[k,]$Type,ignore.case=T)) {
A[this_to,this_from]=-1
} else if (grepl('negative',x[k,]$Type,ignore.case=T)) {
A[this_to,this_from]=-1
} else if (grepl('predator-prey',x[k,]$Type,ignore.case=T)) {
A[this_from,this_to]=1
A[this_to,this_from]=-1
} else if (grepl('scavenging',x[k,]$Type,ignore.case=T)) {
A[this_from,this_to]=1
} else {
stop(sprintf('unrecognised link type %s (%s to %s)',x[k,]$Type,this_from,this_to))
}
}
this_valid_count=0
grepl('(unknown|minor)',x[k,]$Importance,ignore.case=T)
for (k in (1:dim(x)[1])) {
this_from=as.character(x[k,]$From) # the "from" element of the interaction
this_to=as.character(x[k,]$To) # the "to" element of the interaction
if (grepl('competition',x[k,]$Type,ignore.case=T)) {
A[this_from,this_to]=-1
A[this_to,this_from]=-1
} else if (grepl('habitat',x[k,]$Type,ignore.case=T) || grepl('positive',x[k,]$Type,ignore.case=T)) {
A[this_to,this_from]=1
} else if (grepl('limiting',x[k,]$Type,ignore.case=T)) {
A[this_to,this_from]=-1
} else if (grepl('negative',x[k,]$Type,ignore.case=T)) {
A[this_to,this_from]=-1
} else if (grepl('predator-prey',x[k,]$Type,ignore.case=T)) {
A[this_from,this_to]=1
A[this_to,this_from]=-1
} else if (grepl('scavenging',x[k,]$Type,ignore.case=T)) {
A[this_from,this_to]=1
} else {
stop(sprintf('unrecognised link type %s (%s to %s)',x[k,]$Type,this_from,this_to))
}
}
this_valid_count=0
# now loop many times, each time generating new (random) weights in A
for (twi in 1:max_nwrand) {
# randomisation of weights in A, in range 0.01-1
wA=matrix(runif(n^2),nrow=n)*0.99+0.01
wA=wA*sign(A)
# but make sure diagonals are between -1 and diagval_max
temp=diag(rep(1,dim(A)[1]))
wA=wA*(1-temp)+(-1-diagval_max)*diag(runif(n))+diagval_max*temp
# calculate the response, and check the validation criteria
adjwA=-solve(wA) #negative inverse of wA
adjwA[abs(adjwA)<1e-07]=0 # set very small responses to zero
# check that response fits validation data
this_valid=1
# check all validation criteria: if any fail, then this model is not valid
for (k in 1:dim(model_validation)[1]) {
temp_response=-adjwA[,cm_idx]
if (dim(temp_response)[2]>1) {
# sum response over the individual responses
temp_response=rowSums(temp_response)
}
temp_response=sign(temp_response)
if (temp_response[model_validation[k,'response_node']] != model_validation[k,'response_value']) {
this_valid=0 #not valid
break
}
}
if (!this_valid) next # not valid, so discard this realisation
# ok, this realisation is valid: is it also stable?
if (!all(Re(eigen(wA,only.values=T)$values)<0)) {
# not stable
next
}
# so if we got this far, this realisation is both valid and stable
stable_count_cm=stable_count_cm+1
this_valid_count=this_valid_count+1
# find the predicted response to cat/myxo suppression
temp=-adjwA[,cm_idx]
if (dim(temp)[2]>1)   temp=rowSums(temp)    # sum response over the individual responses (i.e. total response is the sum of responses to cat and myxo suppression)
temp=sign(temp) # only interested in signs of responses
# keep tabs on summary results
rsummary_cm[1,]=rsummary_cm[1,]+as.double(temp==-1)
rsummary_cm[2,]=rsummary_cm[2,]+as.double(temp==0)
rsummary_cm[3,]=rsummary_cm[3,]+as.double(temp==1)
# now simulate the eradication project
wA=wA[pcm_idx,pcm_idx] #drop the columns and rows associated with cats and myxo
#check stability of model with cats and myxo and their associated links removed
this_pcm_stable=1
if (!all(Re(eigen(wA,only.values=T)$values)<0)) {
this_pcm_stable=0
}
if (this_pcm_stable) {
stable_count_pcm=stable_count_pcm+1
adjwA=-solve(wA) #negative inverse of wA
adjwA[abs(adjwA)<1e-07]=0 # set very small responses to zero
# predicted response to eradication project
temp=-adjwA[,pcm_results_cols]
if (dim(temp)[2]>1) temp=rowSums(temp)
temp=sign(temp)
rsummary_pcm[1,]=rsummary_pcm[1,]+as.double(temp==-1)
rsummary_pcm[2,]=rsummary_pcm[2,]+as.double(temp==0)
rsummary_pcm[3,]=rsummary_pcm[3,]+as.double(temp==1)
# also keep separate count of results for models in which target species were actually suppressed
if (all(temp[pcm_results_cols]<0)) {
rsummary_pcm_subset[1,]=rsummary_pcm_subset[1,]+as.double(temp==-1)
rsummary_pcm_subset[2,]=rsummary_pcm_subset[2,]+as.double(temp==0)
rsummary_pcm_subset[3,]=rsummary_pcm_subset[3,]+as.double(temp==1)
}
} # if this_pcm_stable
if (this_valid_count==nwrand) {
# we are trying up to max_nwrand times, but if we've achieved our target of nwrand valid configurations, bail out
break
}
} #end twi loop
A
wA
# randomisation of weights in A, in range 0.01-1
wA=matrix(runif(n^2),nrow=n)*0.99+0.01
wA=wA*sign(A)
# but make sure diagonals are between -1 and diagval_max
temp=diag(rep(1,dim(A)[1]))
wA
temp
wA=wA*(1-temp)+(-1-diagval_max)*diag(runif(n))+diagval_max*temp
# calculate the response, and check the validation criteria
adjwA=-solve(wA) #negative inverse of wA
adjwA[abs(adjwA)<1e-07]=0 # set very small responses to zero
# check that response fits validation data
this_valid=1
temp_response=-adjwA[,cm_idx]
dim(temp_response)[2]>1
# sum response over the individual responses
temp_response=rowSums(temp_response)
setwd("~/Documents/Australia/R_code/Raymond_code")
x=read.table('macquarie_interactions.csv',sep=',',header=T)
nwrand=1000 # number of randomisations with different random weights on interaction strengths
max_nwrand=20*nwrand #try a maximum of this many realisations to get the nwrand results
# validation data: what can we use to ground-truth our models?
# these are responses to suppression of cats and myxoma (i.e. rabbits increased, tall tussock decreased, and cats decreased)
model_validation=matrix(c('Rabbits',1,'Tall tussock vegetation',-1,'Cats',-1),nrow=3,ncol=2,byrow=TRUE)
colnames(model_validation)=c('response_node','response_value')
# get the list of unique names within these interactions
node_names=unique(union(x$To,x$From))
stable_count_cm=0 # number of realisations that were stable
# summary of predictions for each element in the model
rsummary_cm=matrix(0,nrow=3,ncol=length(node_names))
rownames(rsummary_cm)=c('Negative','Zero','Positive')
colnames(rsummary_cm)=node_names
cm_idx=grep('(cats|myxoma)',node_names,ignore.case=T)
pcm_idx=grep('[^(cats|myxoma)]',node_names,ignore.case=T) #which elements in the model are relevant for the eradication project (not cats or myxo)
pcm_node_names=node_names[pcm_idx]
stable_count_pcm=0 # number of realisations that passed the additional stability test (after the removal of cats and myxo from the model)
pcm_results_cols=grep('(rabbits|rats|mice)',node_names,ignore.case=T) # the columns in the A matrix that give the responses to perturbations of our eradication target species
# summary of predictions for each element in the model
rsummary_pcm=matrix(0,nrow=3,ncol=length(pcm_node_names))
rownames(rsummary_pcm)=c('Negative','Zero','Positive')
colnames(rsummary_pcm)=pcm_node_names
# summary of predictions for each element in the model, but only for the subset of simulations in which the target species were actually suppressed
rsummary_pcm_subset=matrix(0,nrow=3,ncol=length(pcm_node_names)) #summary for successful runs
rownames(rsummary_pcm_subset)=c('Negative','Zero','Positive')
colnames(rsummary_pcm_subset)=pcm_node_names
diagval_max=-0.25 # maximum allowable value for self-limitation links
n=length(node_names) #number of nodes
n_pcm=length(pcm_node_names) #number of nodes once cats and myxo removed
cat(sprintf('Main loop started at: %s\n',date()))
flush.console()
# initialise the interactions matrix A
A=matrix(0,nrow=n,ncol=n)
colnames(A)=node_names
rownames(A)=node_names
for (k in (1:dim(x)[1])) {
if (grepl('(unknown|minor)',x[k,]$Importance,ignore.case=T)) {
# ignore 'minor' or 'unknown' links
next
}
this_from=as.character(x[k,]$From) # the "from" element of the interaction
this_to=as.character(x[k,]$To) # the "to" element of the interaction
if (grepl('competition',x[k,]$Type,ignore.case=T)) {
A[this_from,this_to]=-1
A[this_to,this_from]=-1
} else if (grepl('habitat',x[k,]$Type,ignore.case=T) || grepl('positive',x[k,]$Type,ignore.case=T)) {
A[this_to,this_from]=1
} else if (grepl('limiting',x[k,]$Type,ignore.case=T)) {
A[this_to,this_from]=-1
} else if (grepl('negative',x[k,]$Type,ignore.case=T)) {
A[this_to,this_from]=-1
} else if (grepl('predator-prey',x[k,]$Type,ignore.case=T)) {
A[this_from,this_to]=1
A[this_to,this_from]=-1
} else if (grepl('scavenging',x[k,]$Type,ignore.case=T)) {
A[this_from,this_to]=1
} else {
stop(sprintf('unrecognised link type %s (%s to %s)',x[k,]$Type,this_from,this_to))
}
}
this_valid_count=0
# now loop many times, each time generating new (random) weights in A
for (twi in 1:max_nwrand) {
# randomisation of weights in A, in range 0.01-1
wA=matrix(runif(n^2),nrow=n)*0.99+0.01
wA=wA*sign(A)
# but make sure diagonals are between -1 and diagval_max
temp=diag(rep(1,dim(A)[1]))
wA=wA*(1-temp)+(-1-diagval_max)*diag(runif(n))+diagval_max*temp
# calculate the response, and check the validation criteria
adjwA=-solve(wA) #negative inverse of wA
adjwA[abs(adjwA)<1e-07]=0 # set very small responses to zero
# check that response fits validation data
this_valid=1
# check all validation criteria: if any fail, then this model is not valid
for (k in 1:dim(model_validation)[1]) {
temp_response=-adjwA[,cm_idx]
if (dim(temp_response)[2]>1) {
# sum response over the individual responses
temp_response=rowSums(temp_response)
}
temp_response=sign(temp_response)
if (temp_response[model_validation[k,'response_node']] != model_validation[k,'response_value']) {
this_valid=0 #not valid
break
}
}
if (!this_valid) next # not valid, so discard this realisation
# ok, this realisation is valid: is it also stable?
if (!all(Re(eigen(wA,only.values=T)$values)<0)) {
# not stable
next
}
# so if we got this far, this realisation is both valid and stable
stable_count_cm=stable_count_cm+1
this_valid_count=this_valid_count+1
# find the predicted response to cat/myxo suppression
temp=-adjwA[,cm_idx]
if (dim(temp)[2]>1)   temp=rowSums(temp)    # sum response over the individual responses (i.e. total response is the sum of responses to cat and myxo suppression)
temp=sign(temp) # only interested in signs of responses
# keep tabs on summary results
rsummary_cm[1,]=rsummary_cm[1,]+as.double(temp==-1)
rsummary_cm[2,]=rsummary_cm[2,]+as.double(temp==0)
rsummary_cm[3,]=rsummary_cm[3,]+as.double(temp==1)
# now simulate the eradication project
wA=wA[pcm_idx,pcm_idx] #drop the columns and rows associated with cats and myxo
#check stability of model with cats and myxo and their associated links removed
this_pcm_stable=1
if (!all(Re(eigen(wA,only.values=T)$values)<0)) {
this_pcm_stable=0
}
if (this_pcm_stable) {
stable_count_pcm=stable_count_pcm+1
adjwA=-solve(wA) #negative inverse of wA
adjwA[abs(adjwA)<1e-07]=0 # set very small responses to zero
# predicted response to eradication project
temp=-adjwA[,pcm_results_cols]
if (dim(temp)[2]>1) temp=rowSums(temp)
temp=sign(temp)
rsummary_pcm[1,]=rsummary_pcm[1,]+as.double(temp==-1)
rsummary_pcm[2,]=rsummary_pcm[2,]+as.double(temp==0)
rsummary_pcm[3,]=rsummary_pcm[3,]+as.double(temp==1)
# also keep separate count of results for models in which target species were actually suppressed
if (all(temp[pcm_results_cols]<0)) {
rsummary_pcm_subset[1,]=rsummary_pcm_subset[1,]+as.double(temp==-1)
rsummary_pcm_subset[2,]=rsummary_pcm_subset[2,]+as.double(temp==0)
rsummary_pcm_subset[3,]=rsummary_pcm_subset[3,]+as.double(temp==1)
}
} # if this_pcm_stable
if (this_valid_count==nwrand) {
# we are trying up to max_nwrand times, but if we've achieved our target of nwrand valid configurations, bail out
break
}
} #end twi loop
dim(temp)[2]>1
dim(temp_response)[2]>1
setwd("~/Documents/Australia/R_code")
source('~/Documents/Australia/R_code/loop_model_raymond.R')
source('~/Documents/Australia/R_code/loop_model_raymond.R')
dim(temp_response)[2]>1
dim(temp_response)[2]>1
source('~/Documents/Australia/R_code/loop_model_raymond.R')
dim(temp_response)[2]>1
temp_response=rowSums(temp_response)
temp_response
temp_response=-adjwA[,cm_idx]
temp_response
dim(temp_response)[2]>1
temp_response=-adjwA[,cm_idx]
dim(temp_response)[2]>1
dim(temp_response)[2]
dim(temp_response)
cm_idx
node_names
dim(temp_response)
dim(temp_response)>1
dim(pcm_idx)
?dim
length(temp_response)
is.matrix(temp_response)
source('~/Documents/Australia/R_code/loop_model_raymond.R')
source('~/Documents/Australia/R_code/loop_model_raymond.R')
hotnet
source('~/Documents/Australia/R_code/network_work.R')
source('~/Documents/Australia/R_code/network_work.R')
head(hotnet)
nwfile <- data.frame(hotnet$prey, hotnet$predator)
head(nwfile)
head(hotnet)
write.table(nwfile, file = "martu.nw1", sep = "\t")
?write.table
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F)
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F)
nwfile <- data.frame(hotnet$prey, hotnet$predator)
nwfile$hotnet.prey <- paste(nwfile$hotnet.prey,
sep = " ")
head(nwfile)
nwfile$hotnet.predator <- paste(nwfile$hotnet.predator,
sep = " ")
head(nwfile)
paste(nwfile$hotnet.predator,
sep = " ")
nwfile$hotnet.prey <- gsub(" ", "", nwfile$hotnet.prey, fixed = TRUE)
nwfile$hotnet.predator <- gsub(" ", "", nwfile$hotnet.predator, fixed = TRUE)
head(nwfile)
nwfile <- data.frame(hotnet$prey, hotnet$predator)
nwfile$hotnet.prey <- gsub(" ", "_", nwfile$hotnet.prey, fixed = TRUE)
nwfile$hotnet.predator <- gsub(" ", "_", nwfile$hotnet.predator, fixed = TRUE)
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F)
head(nwfile)
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F)
?write.table
nrow(nwfile)
unique(union(nwfile$hotnet.prey, nwfile$hotnet.predator))
length(unique(union(nwfile$hotnet.prey, nwfile$hotnet.predator)))
nwfile <- data.frame(hotnet$prey, hotnet$predator)
nwfile$hotnet.prey <- gsub(" ", "_", nwfile$hotnet.prey, fixed = TRUE)
nwfile$hotnet.predator <- gsub(" ", "_", nwfile$hotnet.predator, fixed = TRUE)
nnodes <- length(unique(union(nwfile$hotnet.prey, nwfile$hotnet.predator)))
cat(nnodes, file="martu.nw1")
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F,
append = T)
cat(nnodes"\n", file="martu.nw1")
cat(nnodes"\n")#, file="martu.nw1")
cat(nnodes\n)#, file="martu.nw1")
cat(nnodes\t)#, file="martu.nw1")
cat(nnodes,\t)#, file="martu.nw1")
cat(nnodes,"\t")#, file="martu.nw1")
cat(nnodes,"\t", file="martu.nw1")
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F,
append = T)
cat(nnodes,"\n", file="martu.nw1")
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F,
append = T)
data(fingerprintMat)
data(targetMat)
data(Colors2)
MCF7_F = Cluster(fingerprintMat,type="data",distmeasure="tanimoto",normalize=FALSE,
clust="agnes",linkage="ward",gap=FALSE,maxK=55)
MCF7_T = Cluster(targetMat,type="data",distmeasure="tanimoto",normalize=FALSE,
clust="agnes",linkage="ward",gap=FALSE,maxK=55)
L=list(MCF7_F,MCF7_T)
names=c("FP","TP")
HeatmapPlot(MCF7_T,MCF7_F,names=rownames(fingerprintMat),nrclusters=7,cols=Colors2,plottype="new",
location=NULL)
install.packages("IntClust")
