temp=diag(rep(1,dim(A)[1]))
wA=wA*(1-temp)+(-1-diagval_max)*diag(runif(n))+diagval_max*temp
# calculate the response, and check the validation criteria
adjwA=-solve(wA) #negative inverse of wA
adjwA[abs(adjwA)<1e-07]=0 # set very small responses to zero
# check that response fits validation data
this_valid=1
# check all validation criteria: if any fail, then this model is not valid
for (k in 1:dim(model_validation)[1]) {
temp_response=-adjwA[,cm_idx]
if (dim(temp_response)[2]>1) {
# sum response over the individual responses
temp_response=rowSums(temp_response)
}
temp_response=sign(temp_response)
if (temp_response[model_validation[k,'response_node']] != model_validation[k,'response_value']) {
this_valid=0 #not valid
break
}
}
if (!this_valid) next # not valid, so discard this realisation
# ok, this realisation is valid: is it also stable?
if (!all(Re(eigen(wA,only.values=T)$values)<0)) {
# not stable
next
}
# so if we got this far, this realisation is both valid and stable
stable_count_cm=stable_count_cm+1
this_valid_count=this_valid_count+1
# find the predicted response to cat/myxo suppression
temp=-adjwA[,cm_idx]
if (dim(temp)[2]>1)   temp=rowSums(temp)    # sum response over the individual responses (i.e. total response is the sum of responses to cat and myxo suppression)
temp=sign(temp) # only interested in signs of responses
# keep tabs on summary results
rsummary_cm[1,]=rsummary_cm[1,]+as.double(temp==-1)
rsummary_cm[2,]=rsummary_cm[2,]+as.double(temp==0)
rsummary_cm[3,]=rsummary_cm[3,]+as.double(temp==1)
# now simulate the eradication project
wA=wA[pcm_idx,pcm_idx] #drop the columns and rows associated with cats and myxo
#check stability of model with cats and myxo and their associated links removed
this_pcm_stable=1
if (!all(Re(eigen(wA,only.values=T)$values)<0)) {
this_pcm_stable=0
}
if (this_pcm_stable) {
stable_count_pcm=stable_count_pcm+1
adjwA=-solve(wA) #negative inverse of wA
adjwA[abs(adjwA)<1e-07]=0 # set very small responses to zero
# predicted response to eradication project
temp=-adjwA[,pcm_results_cols]
if (dim(temp)[2]>1) temp=rowSums(temp)
temp=sign(temp)
rsummary_pcm[1,]=rsummary_pcm[1,]+as.double(temp==-1)
rsummary_pcm[2,]=rsummary_pcm[2,]+as.double(temp==0)
rsummary_pcm[3,]=rsummary_pcm[3,]+as.double(temp==1)
# also keep separate count of results for models in which target species were actually suppressed
if (all(temp[pcm_results_cols]<0)) {
rsummary_pcm_subset[1,]=rsummary_pcm_subset[1,]+as.double(temp==-1)
rsummary_pcm_subset[2,]=rsummary_pcm_subset[2,]+as.double(temp==0)
rsummary_pcm_subset[3,]=rsummary_pcm_subset[3,]+as.double(temp==1)
}
} # if this_pcm_stable
if (this_valid_count==nwrand) {
# we are trying up to max_nwrand times, but if we've achieved our target of nwrand valid configurations, bail out
break
}
} #end twi loop
dim(temp)[2]>1
dim(temp_response)[2]>1
setwd("~/Documents/Australia/R_code")
source('~/Documents/Australia/R_code/loop_model_raymond.R')
source('~/Documents/Australia/R_code/loop_model_raymond.R')
dim(temp_response)[2]>1
dim(temp_response)[2]>1
source('~/Documents/Australia/R_code/loop_model_raymond.R')
dim(temp_response)[2]>1
temp_response=rowSums(temp_response)
temp_response
temp_response=-adjwA[,cm_idx]
temp_response
dim(temp_response)[2]>1
temp_response=-adjwA[,cm_idx]
dim(temp_response)[2]>1
dim(temp_response)[2]
dim(temp_response)
cm_idx
node_names
dim(temp_response)
dim(temp_response)>1
dim(pcm_idx)
?dim
length(temp_response)
is.matrix(temp_response)
source('~/Documents/Australia/R_code/loop_model_raymond.R')
source('~/Documents/Australia/R_code/loop_model_raymond.R')
hotnet
source('~/Documents/Australia/R_code/network_work.R')
source('~/Documents/Australia/R_code/network_work.R')
head(hotnet)
nwfile <- data.frame(hotnet$prey, hotnet$predator)
head(nwfile)
head(hotnet)
write.table(nwfile, file = "martu.nw1", sep = "\t")
?write.table
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F)
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F)
nwfile <- data.frame(hotnet$prey, hotnet$predator)
nwfile$hotnet.prey <- paste(nwfile$hotnet.prey,
sep = " ")
head(nwfile)
nwfile$hotnet.predator <- paste(nwfile$hotnet.predator,
sep = " ")
head(nwfile)
paste(nwfile$hotnet.predator,
sep = " ")
nwfile$hotnet.prey <- gsub(" ", "", nwfile$hotnet.prey, fixed = TRUE)
nwfile$hotnet.predator <- gsub(" ", "", nwfile$hotnet.predator, fixed = TRUE)
head(nwfile)
nwfile <- data.frame(hotnet$prey, hotnet$predator)
nwfile$hotnet.prey <- gsub(" ", "_", nwfile$hotnet.prey, fixed = TRUE)
nwfile$hotnet.predator <- gsub(" ", "_", nwfile$hotnet.predator, fixed = TRUE)
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F)
head(nwfile)
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F)
?write.table
nrow(nwfile)
unique(union(nwfile$hotnet.prey, nwfile$hotnet.predator))
length(unique(union(nwfile$hotnet.prey, nwfile$hotnet.predator)))
nwfile <- data.frame(hotnet$prey, hotnet$predator)
nwfile$hotnet.prey <- gsub(" ", "_", nwfile$hotnet.prey, fixed = TRUE)
nwfile$hotnet.predator <- gsub(" ", "_", nwfile$hotnet.predator, fixed = TRUE)
nnodes <- length(unique(union(nwfile$hotnet.prey, nwfile$hotnet.predator)))
cat(nnodes, file="martu.nw1")
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F,
append = T)
cat(nnodes"\n", file="martu.nw1")
cat(nnodes"\n")#, file="martu.nw1")
cat(nnodes\n)#, file="martu.nw1")
cat(nnodes\t)#, file="martu.nw1")
cat(nnodes,\t)#, file="martu.nw1")
cat(nnodes,"\t")#, file="martu.nw1")
cat(nnodes,"\t", file="martu.nw1")
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F,
append = T)
cat(nnodes,"\n", file="martu.nw1")
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F,
append = T)
data(fingerprintMat)
data(targetMat)
data(Colors2)
MCF7_F = Cluster(fingerprintMat,type="data",distmeasure="tanimoto",normalize=FALSE,
clust="agnes",linkage="ward",gap=FALSE,maxK=55)
MCF7_T = Cluster(targetMat,type="data",distmeasure="tanimoto",normalize=FALSE,
clust="agnes",linkage="ward",gap=FALSE,maxK=55)
L=list(MCF7_F,MCF7_T)
names=c("FP","TP")
HeatmapPlot(MCF7_T,MCF7_F,names=rownames(fingerprintMat),nrclusters=7,cols=Colors2,plottype="new",
location=NULL)
install.packages("IntClust")
hotnet<- read.csv("hotnet.csv")
hotnet<- read.csv("hotnet.csv", stringsAsFactors = F)
nwfile <- data.frame(hotnet$prey, hotnet$predator)
nwfile$hotnet.prey <- gsub(" ", "_", nwfile$hotnet.prey, fixed = TRUE)
nwfile$hotnet.predator <- gsub(" ", "_", nwfile$hotnet.predator, fixed = TRUE)
nnodes <- length(unique(union(nwfile$hotnet.prey,
nwfile$hotnet.predator)))
cat(nnodes,"\n", file="martu.nw1")
write.table(nwfile,
file = "martu.nw1",
sep = "\t",
quote = F,
row.names = F,
col.names = F,
append = T)
library(reshape2)
hotnet <- read.csv("hotnet.csv",  #get network
header = T,
stringsAsFactors = F)
hotnet$weight <- NULL #take away weights
stefgroup <- read.csv("stefgroups.csv",  #get stefanis groups
header = T,
stringsAsFactors = F)
stefgroup<-melt(stefgroup, #melt common names and latin names
id.vars = "Group",
value.name = "name")
hotnet$From <- as.factor(stefgroup$Group[match(hotnet$predator, #match predators
stefgroup$name)])
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:",
hotnet[is.na(hotnet$From)])
hotnet$To <- as.factor(stefgroup$Group[match(hotnet$prey,   #match prey
stefgroup$name)])
cat(sum(is.na(hotnet$To)), #print how many did not match
"prey with missing matches:",
hotnet[is.na(hotnet$To)])
hotnet$Type <- "Predator-prey" #add interaction type
head(hotnet)
head(stefgroup)
head(stefgroup, 20)
stefgroup <- read.csv("stefgroups.csv",  #get stefanis groups
header = T,
stringsAsFactors = F)
head(stefgroup, 20)
library(reshape2)
hotnet <- read.csv("hotnet.csv",  #get network
header = T,
stringsAsFactors = F)
hotnet$weight <- NULL #take away weights
stefgroup <- read.csv("stefgroups.csv",  #get stefanis groups
header = T,
stringsAsFactors = F)
head(stefgroup)
head(hotnet)
hotnet$From <- as.factor(stefgroup$Group[match(hotnet$predator, #match predators
stefgroup$Latin.Name)])
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:",
hotnet[is.na(hotnet$From)])
head(hotnet)
is.na(hotnet$From)
sum(is.na(hotnet$From))
head(hothet)
head(hotnet)
hotnet[is.na(hotnet$From)]
hotnet[is.na(hotnet$From),]
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:",
hotnet[is.na(hotnet$From),])
g<-hotnet[is.na(hotnet$From),]
g
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:")
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:")
hotnet[is.na(hotnet$From),]
library(reshape2)
hotnet <- read.csv("hotnet.csv",  #get network
header = T,
stringsAsFactors = F)
hotnet$weight <- NULL #take away weights
stefgroup <- read.csv("stefgroups.csv",  #get stefanis groups
header = T,
stringsAsFactors = F)
hotnet$From <- as.factor(stefgroup$Group[match(hotnet$predator, #match predators
stefgroup$Latin.Name)])
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:")
hotnet[is.na(hotnet$From),]
head(hotnet)
hotnet$To <- as.factor(stefgroup$Group[match(hotnet$prey,   #match prey
stefgroup$Latin.Name)])
cat(sum(is.na(hotnet$To)), #print how many did not match
"prey with missing matches:")
hotnet[is.na(hotnet$To),]
hotnet$Type <- "Predator-prey" #add interaction type
head(hotnet)
head(stefgroup)
hotnet <- read.csv("hotnet.csv",  #get network
header = T,
stringsAsFactors = F)
hotnet$weight <- NULL #take away weights
stefgroup <- read.csv("stefgroups.csv",  #get stefanis groups
header = T,
stringsAsFactors = F)
hotnet$From <- as.factor(stefgroup$stefgroup[match(hotnet$predator, #match predators
stefgroup$latin)])
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:")
hotnet[is.na(hotnet$From),]
hotnet$To <- as.factor(stefgroup$stefgroup[match(hotnet$prey,   #match prey
stefgroup$latin)])
cat(sum(is.na(hotnet$To)), #print how many did not match
"prey with missing matches:")
hotnet[is.na(hotnet$To),]
hotnet$Type <- "Predator-prey" #add interaction type
stefgroup
head(stefgroup)
tg <- read.delim("tg_martu.txt",
header = T,
stringsAsFactors = F,
delim = "/t")
tg <- read.table("tg_martu.txt",
header = T,
stringsAsFactors = F,
sep = "/t")
tg <- read.table("tg_martu.txt",
header = T,
stringsAsFactors = F,
sep = "\t")
tg <- read.delim("tg_martu.txt",
header = T,
stringsAsFactors = F,
delim = "\t")
?read.delim
tg <- read.delim("tg_martu.txt",
header = T,
stringsAsFactors = F,
sep = "\t")
head(tg)
levels(as.factor(tg$X.))
head(tg, 30)
hotnet <- read.csv("hotnet.csv",  #get network
header = T,
stringsAsFactors = F)
hotnet$weight <- NULL #take away weights
stefgroup <- read.csv("stefgroups.csv",  #get stefanis groups
header = T,
stringsAsFactors = F)
tg <- read.delim("tg_martu.txt",
header = T,
stringsAsFactors = F,
sep = "\t")
hotnet$Fromstef <- as.factor(stefgroup$stefgroup[match(hotnet$predator, #match predators
stefgroup$latin)])
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:")
hotnet[is.na(hotnet$From),]
hotnet$Tostef <- as.factor(stefgroup$stefgroup[match(hotnet$prey,   #match prey
stefgroup$latin)])
cat(sum(is.na(hotnet$To)), #print how many did not match
"prey with missing matches:")
hotnet[is.na(hotnet$To),]
hotnet$Type <- "Predator-prey" #add interaction type
head(hotnet)
head(stefgroup)
aic <- read.delim("aic_martu.txt", #get aic groups
header = T,
stringsAsFactors = F,
sep = "\t")
head(aic)
?data.frame
groups <- data.frame(common = stefgroup$common,
latin = stefgroup$latin,
stefgroup = stefgroup$stefgroup)
head(groups)
groups$tg <- tg$X.TroG[match(groups$latin, tg$Species)]
head(groups)
head(tg)
?strsplit
strsplit(tg$Species, split = "_")
?gsub
gsub("_", " ", tg$Species)
head(tg)
tg <- read.delim("tg_martu.txt", #get trophic groups
header = T,
stringsAsFactors = F,
sep = "\t")
tg$Species <- gsub("_", " ", tg$Species)
groups <- data.frame(common = stefgroup$common,
latin = stefgroup$latin,
stefgroup = stefgroup$stefgroup)
groups$tg <- tg$X.TroG[match(groups$latin, tg$Species)]
head(groups)
?aic
aic <- read.delim("aic_martu.txt", #get aic groups
header = T,
stringsAsFactors = F,
sep = "\t")
aic$Species <- gsub("_", " ", aic$Species) #fix species names
groups <- data.frame(common = stefgroup$common,
latin = stefgroup$latin,
stefgroup = stefgroup$stefgroup)
groups$tg <- tg$X.TroG[match(groups$latin, tg$Species)]
head(aic)
groups$aic <- aic$X.AicG[match(groups$latin, aic$Species)] #add trophic groups
head(groups)
groups
groups
hotnet <- read.csv("hotnet.csv",  #get network
header = T,
stringsAsFactors = F)
hotnet[hotnet$prey=="Cyperus bulbosus",]
groups[is.na(groups$tg),]
stefgroup <- read.csv("stefgroups.csv",  #get stefanis groups
header = T,
stringsAsFactors = F)
tg <- read.delim("tg_martu.txt", #get trophic groups from n_w
header = T,
stringsAsFactors = F,
sep = "\t")
tg$Species <- gsub("_", " ", tg$Species) #fix species names
tg$Species <- gsub("human", "Homo sapiens", tg$Species)
tg$Species <- gsub("*", "", tg$Species)
aic <- read.delim("aic_martu.txt", #get aic groups from n_w
header = T,
stringsAsFactors = F,
sep = "\t")
aic$Species <- gsub("_", " ", aic$Species) #fix species names
aic$Species <- gsub("human", "Homo sapiens", aic$Species)
aic$Species <- gsub("*", "", aic$Species)
groups <- data.frame(common = stefgroup$common, #make table of species names
latin = stefgroup$latin,
stefgroup = stefgroup$stefgroup)
groups$tg <- tg$X.TroG[match(groups$latin, tg$Species)] #add trophic groups
groups$aic <- aic$X.AicG[match(groups$latin, aic$Species)] #add trophic groups
groups[is.na(groups$tg),]
groups[is.na(groups$aic),]
head(tg)
tg$Species <- gsub("*", "", tg$Species)
head(tg)
tg$Species <- gsub("*", "hhh", tg$Species)
head(tg)
tg$Species <- gsub("*", "", tg$Species)
head(tg)
tg <- read.delim("tg_martu.txt", #get trophic groups from n_w
header = T,
stringsAsFactors = F,
sep = "\t")
tg$Species <- gsub("_", " ", tg$Species) #fix species names
tg$Species <- gsub("human", "Homo sapiens", tg$Species)
tg$Species <- gsub("*", "", tg$Species)
head(tg)
tg <- read.delim("tg_martu.txt", #get trophic groups from n_w
header = T,
stringsAsFactors = F,
sep = "\t")
tg$Species <- gsub("_", " ", tg$Species) #fix species names
tg$Species <- gsub("human", "Homo sapiens", tg$Species)
tg$Species <- gsub("\*", "", tg$Species)
head(tg)
tg <- read.delim("tg_martu.txt", #get trophic groups from n_w
header = T,
stringsAsFactors = F,
sep = "\t")
tg$Species <- gsub("_", " ", tg$Species) #fix species names
tg$Species <- gsub("human", "Homo sapiens", tg$Species)
tg$Species <- gsub("\\*", "", tg$Species)
head(tg)
aic <- read.delim("aic_martu.txt", #get aic groups from n_w
header = T,
stringsAsFactors = F,
sep = "\t")
aic$Species <- gsub("_", " ", aic$Species) #fix species names
aic$Species <- gsub("human", "Homo sapiens", aic$Species)
aic$Species <- gsub("\\*", "", aic$Species)
groups <- data.frame(common = stefgroup$common, #make table of species names
latin = stefgroup$latin,
stefgroup = stefgroup$stefgroup)
groups$tg <- tg$X.TroG[match(groups$latin, tg$Species)] #add trophic groups
groups$aic <- aic$X.AicG[match(groups$latin, aic$Species)] #add trophic groups
groups[is.na(groups$tg),]
groups[is.na(groups$aic),]
head(groups)
head(groups,30)
hotnet <- read.csv("hotnet.csv",  #get network
header = T,
stringsAsFactors = F)
hotnet$weight <- NULL #take away weights
hotnet$From <- as.factor(groups$latin[match(hotnet$predator, #match predators
groups$stefgroup)])
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:")
hotnet[is.na(hotnet$From),]
head(hotnet)
head(groups)
hotnet$From <- as.factor(groups$stefgroup[match(hotnet$predator, #match predators
groups$latin)])
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:")
hotnet[is.na(hotnet$From),]
hotnet$To <- as.factor(groups$stefgroup[match(hotnet$prey,   #match prey
groups$latin)])
cat(sum(is.na(hotnet$To)), #print how many did not match
"prey with missing matches:")
hotnet[is.na(hotnet$To),]
hotnet$Type <- "Predator-prey" #add interaction type
head(hotnet)
hotnet$From <- as.factor(groups$tg[match(hotnet$predator, #match predators
groups$latin)])
cat(sum(is.na(hotnet$From)), #print how many did not match
"predators with missing matches:")
hotnet[is.na(hotnet$From),]
hotnet$To <- as.factor(groups$tg[match(hotnet$prey,   #match prey
groups$latin)])
cat(sum(is.na(hotnet$To)), #print how many did not match
"prey with missing matches:")
hotnet[is.na(hotnet$To),]
head(hotnet)
